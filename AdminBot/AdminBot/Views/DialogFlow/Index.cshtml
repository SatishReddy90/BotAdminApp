@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Dialog Flow";
}

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css" />
}

<h4>Dialog Flow</h4>
<div>
    <button type="button" class="btn btn-primary float-right" id="btn-extract" onclick="saveChanges()">Save Changes</button>
</div>
<div id="dialog-tree"></div>

<div class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Dialog Flow</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @*<div class="form-group">
            <label for="opt">Option:</label>
            <input type="text" class="form-control" id="opt">
        </div>
        <div class="form-group">
            <label for="next-qstn">Next Question:</label>
            <input type="text" class="form-control" id="next-qstn">
        </div>*@
                <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="pills-add-tab" data-toggle="pill" href="#pills-add" role="tab" aria-controls="pills-add" aria-selected="true">Add Node</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="pills-update-tab" data-toggle="pill" href="#pills-update" role="tab" aria-controls="pills-update" aria-selected="false">Update Node</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="pills-delete-tab" data-toggle="pill" href="#pills-delete" role="tab" aria-controls="pills-delete" aria-selected="false">Delete Node</a>
                    </li>
                </ul>
                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade show active" id="pills-add" role="tabpanel" aria-labelledby="pills-add-tab">
                        <div class="node-modal-info">
                            A new node will be added as a child to the selected node.
                        </div>
                        <div class="form-group">
                            <label for="opt-add">User Choice:</label>
                            <input type="text" class="form-control" id="opt-add">
                        </div>
                        <div class="form-group">
                            <label for="next-qstn-add">Next Response:</label>
                            <input type="text" class="form-control" id="next-qstn-add">
                        </div>
                        <button type="button" class="btn btn-primary" onclick="addNode()">Add</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                    <div class="tab-pane fade" id="pills-update" role="tabpanel" aria-labelledby="pills-update-tab">
                        <div class="node-modal-info">
                            The selected node will be updated with the provided values.
                        </div>
                        <div class="form-group">
                            <label for="opt-update">User Choice:</label>
                            <input type="text" class="form-control" id="opt-update">
                        </div>
                        <div class="form-group">
                            <label for="next-qstn-update">Next Response:</label>
                            <input type="text" class="form-control" id="next-qstn-update">
                        </div>
                        <button type="button" class="btn btn-primary" onclick="updateNode()">Update</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                    <div class="tab-pane fade" id="pills-delete" role="tabpanel" aria-labelledby="pills-delete-tab">
                        <div class="node-modal-info">
                            The selected node and all the associated child nodes will be deleted from the tree.
                        </div>
                        <button type="button" class="btn btn-primary" onclick="deleteNode()">Delete</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
            @*<div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="addNode()">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>*@
        </div>
    </div>
</div>
<div id="loader"></div>

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/jstree.min.js"></script>
    <script>
        var botBaseUrl = "@ViewData["BotBaseUrl"]";
        var flowData;
        var treeDataArray = [];
        var node;

        //$.getJSON('question-flow-config.json', function (data) {
        //    flowData = data;
        //    console.log(flowData);
        //    treeDataArray.push(getTreeData(flowData));
        //    console.log(treeDataArray);
        //    $('#dialog-tree')
        //        .on("changed.jstree", function (e, data) {
        //            node=data.instance.get_node(data.selected[0]);
        //            $('.modal').modal();
        //        })
        //        .jstree({
        //            'core': {
        //                'data': treeDataArray,
        //                'check_callback': true
        //            }
        //        });
        //});
        loadData();

        function loadData() {
            displayLoader();
            $.ajax({
                url: botBaseUrl + "api/BotConfiguration/GetDialogFlowDetails",
                type: "GET"
            })
                .done(function (data) {
                    flowData = data;
                    console.log(flowData);
                    treeDataArray.push(getTreeData(flowData));
                    console.log(treeDataArray);
                    $('#dialog-tree')
                        .on("changed.jstree", function (e, data) {
                            node = data.instance.get_node(data.selected[0]);
                            var result = { answer: null, nextResponse: null };
                            getFlowDataNode(node, flowData, result);
                            $('#opt-update').val(result.answer);
                            $('#next-qstn-update').val(result.nextResponse);
                            $('.modal').modal();
                        })
                        .jstree({
                            'core': {
                                'data': treeDataArray,
                                'check_callback': true
                            }
                        });
                })
                .fail(function (error) {
                    toastr.error(error.responseText, error.statusText);
                })
                .always(function () {
                    hideLoader();
                });
        }

        function getFlowDataNode(treeNode, flowDataNode, result) {
            if ("(" + flowDataNode.answer + ") " + flowDataNode.nextResponse == treeNode.text) { 
                result.answer = flowDataNode.answer;
                result.nextResponse = flowDataNode.nextResponse;
                return;
            }
            for (var i = 0; i < flowDataNode.branches.length; i++) {
                getFlowDataNode(treeNode, flowDataNode.branches[i],result);
            }
        }
        
        function displayLoader() {
            $('#loader').addClass("loader");
        }
        function hideLoader() {
            $('#loader').removeClass("loader");
        }

        function getTreeData(flowData) {
            if (flowData == null) {
                return null;
            }
            var treeData = {
                "text": "(" + flowData.answer + ") " + flowData.nextResponse,
                "state": { "opened": true },
                "icon": false,
                "children": []
            };
            for (var i = 0; i < flowData.branches.length; i++) {
                treeData.children.push(getTreeData(flowData.branches[i]));
            }

            return treeData;
        }

        function attachNode(parent, node, tree) {
            if ("(" + tree.answer + ") " + tree.nextResponse == parent) {
                tree.branches.push(node);
                return;
            }
            for (var i = 0; i < tree.branches.length; i++) {
                attachNode(parent, node, tree.branches[i]);
            }
        }

        function updateFlowDataNode(nextResponse, updatedNode, tree) {
            if ("(" + tree.answer + ") " + tree.nextResponse == nextResponse) {
                tree.nextResponse = updatedNode.nextResponse;
                tree.answer = updatedNode.answer;
                return;
            }
            for (var i = 0; i < tree.branches.length; i++) {
                updateFlowDataNode(nextResponse, updatedNode, tree.branches[i]);
            }
        }

        function deleteFlowDataNode(nextResponse, node, parentNode, index) {
            if ("(" + node.answer + ") " + node.nextResponse == nextResponse) {
                //delete node from parentNode
                parentNode.branches.splice(index, 1);
                return;
            }
            for (var i = 0; i < node.branches.length; i++) {
                deleteFlowDataNode(nextResponse, node.branches[i], node, i);
            }
        }


        function addNode() {
            //node.text="test";
            //$('#selected-node').text(node.text);
            var answer = $('#opt-add').val();
            var nextResponse = $('#next-qstn-add').val();

            var flowDataNode = {
                "answer": answer,
                "nextResponse": nextResponse,
                "branches": []
            };

            var treeDataNode = {
                "text": "(" + answer + ")" + " " + nextResponse,
                "state": { "opened": true },
                "icon": false,
                "children": []
            };

            attachNode(node.text, flowDataNode, flowData);
            var id = $.jstree.reference('#dialog-tree').create_node(node, treeDataNode);

            console.log(id);
            console.log(flowData);
            $('.modal').modal('hide');
            //$.jstree.reference('#dialog-tree').load_all();
        }

        function updateNode() {
            var answer = $('#opt-update').val();
            var nextResponse = $('#next-qstn-update').val();

            var flowDataNode = {
                "answer": answer,
                "nextResponse": nextResponse
            };

            //var treeDataNode = {
            //    "text": "(" + answer + ")" + " " + nextResponse,
            //    "state": { "opened": true },
            //    "icon": false,
            //    "children": []
            //};

            updateFlowDataNode(node.text, flowDataNode, flowData);
            $.jstree.reference('#dialog-tree').rename_node(node, "(" + answer + ") " + nextResponse);

            console.log(flowData);
            $('.modal').modal('hide');
        }

        function deleteNode() {

            if (node.parent == '#') {
                toastr.error('Root node cannot be deleted.');
                return;
            }

            deleteFlowDataNode(node.text, flowData, null, null);
            $.jstree.reference('#dialog-tree').delete_node(node);

            console.log(flowData);
            $('.modal').modal('hide');
        }

        function saveChanges() {
            displayLoader();
            $.ajax({
                url: botBaseUrl + "/api/BotConfiguration/UpdateDialogFlow",
                method: "PUT",
                contentType: "application/json",
                data: JSON.stringify(flowData)
            })
                .done(function (response) {
                    toastr.success("Changes saved successfully!");
                    //window.location.href = "/";
                })
                .fail(function (response) {
                    toastr.error(response.responseText, response.statusText);
                })
                .always(function () {
                    hideLoader();
                    //loadData();
                    //window.location.reload();
                });
        }

    </script>

}